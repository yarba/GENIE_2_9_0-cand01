//____________________________________________________________________________
/*!

\program gtune_rijk

\brief   Cross section tuning utility: Fits parameters controlling the cross
         section in the RES/DIS transition region.

         Not a user utility:
         Running and interpreting results is an expert operation.

\syntax  gtune_rijk -h host -u username -p password -d data_sets_to_fit

         Options:
          -h specifies the MySQL hostname and dbase
          -u specifies the MySQL username
          -p specifies the MySQL password
          -d specifies which data sets to fit
             (see list below, input as a comma separated list)

         Example:
         shell% export GDISABLECACHING=YES
         shell% gtune_rijk -h mysql://localhost/NuScat -u costas -p pswd -d 0,1,2,3
                      
\author  Costas Andreopoulos <costas.andreopoulos \at stfc.ac.uk>
         University of Liverpool & STFC Rutherford Appleton Lab

         Hugh Gallagher <gallag \at minos.phy.tufts.edu>
         Tufts University

\created June 06, 2008 

\cpright Copyright (c) 2003-2015, GENIE Neutrino MC Generator Collaboration
         For the full text of the license visit http://copyright.genie-mc.org
         or see $GENIE/LICENSE
*/
//____________________________________________________________________________

#include <cassert>
#include <cstdlib>
#include <sstream>
#include <algorithm>
#include <string>
#include <vector>
#include <map>

#include <TFile.h>
#include <TMinuit.h>
#include <TMath.h>
#include <TSQLServer.h>
#include <TH1.h>
#include <TFile.h>
#include <TLorentzVector.h>

#include "Algorithm/AlgFactory.h"
#include "Algorithm/AlgConfigPool.h"
#include "Base/XSecAlgorithmI.h"
#include "Conventions/Constants.h"
#include "Conventions/Units.h"
#include "EVGDrivers/GEVGDriver.h"
#include "Interaction/SppChannel.h"
#include "Messenger/Messenger.h"
#include "Registry/Registry.h"
#include "Utils/StringUtils.h"
#include "Utils/KineUtils.h"
#include "Numerical/Spline.h"
#include "ValidationTools/NuVld/DBStatus.h"
#include "ValidationTools/NuVld/DBI.h"
#include "ValidationTools/NuVld/DBTable.h"
#include "ValidationTools/NuVld/DBQueryString.h"
#include "ValidationTools/NuVld/MultiGraph.h"

using std::map;
using std::vector;
using std::string;
using std::ostringstream;

using namespace genie;
using namespace genie::nuvld;
using namespace genie::utils;
using namespace genie::constants;

//
// constants
//

// ...............................
// Fitted data sets
// -------------------------------
// 0 -> v N total xsec
// 1 -> v p -> l- p pi+ xsec 
// 2 -> v n -> l- p pi0 xsec
// 3 -> v n -> l- n pi+ xsec
// 4 -> v n -> l- p pi+ pi- xsec
// 5 -> v p -> l- p pi+ pi0 xsec
// 6 -> v p -> l- n pi+ pi+ xsec
// ...............................

const int kNDataSets = 7;

// keys (experiment id / measurement id) for extracting the
// cross section data from the NuValidator MySQL data-base
const char * kKeyList[kNDataSets] = {
/* 0 */ "ANL_12FT,2;ANL_12FT,4;BEBC,0;BEBC,2;BEBC,5;BEBC,8;BNL_7FT,0;BNL_7FT,4;CCFR,2;CCFRR,0;CHARM,0;CHARM,4;FNAL_15FT,1;FNAL_15FT,2;Gargamelle,0;Gargamelle,10;Gargamelle,12;IHEP_ITEP,0;IHEP_ITEP,2;IHEP_JINR,0;SKAT,0",
/* 1 */ "ANL_12FT,0;ANL_12FT,5;ANL_12FT,8;BEBC,4;BEBC,9;BEBC,13;BNL_7FT,5;FNAL_15FT,0;Gargamelle,4;SKAT,4;SKAT,5",
/* 2 */ "ANL_12FT,6;ANL_12FT,9;BNL_7FT,6;SKAT,6",
/* 3 */ "ANL_12FT,7;ANL_12FT,10;BNL_7FT,7;SKAT,7",
/* 4 */ "ANL_12FT,11;BNL_7FT,8",
/* 5 */ "ANL_12FT,12",
/* 6 */ "ANL_12FT,13"
};

const double kEmin  =  0.1;  ///< GeV, minimum energy in the energy range of data points to fit 
const double kEmax  = 20.0;  ///< GeV, maximum energy in the energy range of data points to fit
const double kWcut  =  1.7;  ///< GeV, Wcut parameter for the RES/DIS joining algorithm

const int kNE       =  30;   ///< number of knots in cross section = f(E) cubic splines
const int kNWintg   = 101;   ///< number of W  steps in numerical integration
const int kNQ2intg  = 101;   ///< number of Q2 steps in numerical integration

// resonances taken into account by the cross section model
const int kNR = 18;
const Resonance_t kResonance[kNR] = {
    kP33_1232, kS11_1535, kD13_1520, kS11_1650, kD13_1700, kD15_1675, kS31_1620, kD33_1700, kP11_1440, 
    kP33_1600, kP13_1720, kF15_1680, kP31_1910, kP33_1920, kF35_1905, kF37_1950, kP11_1710, kF17_1970 
};

// fraction of the neutrino resonance-production cross section (listed for all resonances) which contributes 
// to the process describing each fitted data set.
const double kRESFrac[kNDataSets][kNR] = {
/* 0 */   { 1.,        1.,       1.,        1.,         1.,        1.,        1.,        1.,        1.,
            1.,        1.,       1.,        1.,         1.,        1.,        1.,        1.,        1.  },
/* 1 */   { 0.,        0.,       0.,        0.,         0.,        0.,        0.,        0.,        0.,
            0.,        0.,       0.,        0.,         0.,        0.,        0.,        0.,        0.  },
/* 2 */   { 0.,        0.,       0.,        0.,         0.,        0.,        0.,        0.,        0.,
            0.,        0.,       0.,        0.,         0.,        0.,        0.,        0.,        0.  },
/* 3 */   { 0.,        0.,       0.,        0.,         0.,        0.,        0.,        0.,        0.,
            0.,        0.,       0.,        0.,         0.,        0.,        0.,        0.,        0.  },
/* 4 */   { 0.,        0.,       0.,        0.,         0.,        0.,        0.,        0.,        0.,
            0.,        0.,       0.,        0.,         0.,        0.,        0.,        0.,        0.  },
/* 5 */   { 0.,        0.,       0.,        0.,         0.,        0.,        0.,        0.,        0.,
            0.,        0.,       0.,        0.,         0.,        0.,        0.,        0.,        0.  },
/* 6 */   { 0.,        0.,       0.,        0.,         0.,        0.,        0.,        0.,        0.,
            0.,        0.,       0.,        0.,         0.,        0.,        0.,        0.,        0.  }
};

// fraction of the inclusive DIS that goes into the process describing in each fitted data set (for W < Wcut)
const int kNW_b = 17;
const double kW_b[kNW_b] = { 
   1.00,  1.05,  1.10,  1.15,  1.20,  1.25,  1.30,  1.35,  1.40,  1.45,  1.50,  1.55,  1.60,  1.65,  1.70,  1.75,  1.80 
};
const double kDISFrac_b[kNDataSets][kNW_b] =  {
 { 1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00 },
 { 0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00 },
 { 0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00 },
 { 0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00 },
 { 0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00 },
 { 0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00 },
 { 0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00 }
};

// fraction of the inclusive DIS that goes into the process describing in each fitted data set (for W >= Wcut)
const int kNW_a = 17;
const double kW_a[kNW_a] = { 
   1.85,  1.90,  2.00,  2.05,  2.10,  2.20,  2.30,  2.40,  2.50,  2.75,  3.00,  4.00,  5.00,  7.50,  10.00, 12.50, 15.00 
};
const double kDISFrac_a[kNDataSets][kNW_a] = {
 { 1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00,  1.00 },
 { 0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00 },
 { 0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00 },
 { 0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00 },
 { 0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00 },
 { 0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00 },
 { 0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00 }
};

//
// func prototypes
//
void          Init           (int argc, char ** argv);
string        GetArgument    (int argc, char ** argv, const char * option);
double        GetXSecGENIE   (double E, int imode);
void          GetXSecData    (void);
DBQueryString FormQuery      (const char * key_list);
void          DoTheFit       (void);
void          FitFunc        (Int_t &, Double_t *, Double_t &f, Double_t *par, Int_t iflag);
void          Save           (string filename);

//
// globals
//
vector<int>                 gEnabledDataSets;
DBI *                       gDBI = 0;                   ///< dbase interface
DBTable<DBNuXSecTableRow> * gXSecData     [kNDataSets]; ///< fitted data
MultiGraph *                gXSecDataGrph [kNDataSets]; ///< fitted data as graphs
const XSecAlgorithmI *      gRESXSecModel;
const XSecAlgorithmI *      gDISXSecModel;
GEVGDriver *                gNuMuPdrv;
GEVGDriver *                gNuMuNdrv;
map<int, Spline*>           gSplMapRES_numup; ///< res id -> numu+p->l+res spline
map<int, Spline*>           gSplMapRES_numun; ///< res id -> numu+n->l+res spline
map<int, Spline*>           gSplMapRES;       ///< fitted data set id -> RES xsec spline
map<int, Spline*>           gSplMapDIS_b;     ///< fitted data set id -> DIS xsec spline (W <  Wcut)
map<int, Spline*>           gSplMapDIS_a;     ///< fitted data set id -> DIS xsec spline (W >= Wcut)

///< fitted parameter (corresponds to `DIS-HMultWgt-vp-CC-m2' in UsersPhysicsConfig.xml)
double gFittedParam_vpCC_m2; 
///< fitted parameter (corresponds to `DIS-HMultWgt-vp-CC-m3' in UsersPhysicsConfig.xml)
double gFittedParam_vpCC_m3; 
///< fitted parameter (corresponds to `DIS-HMultWgt-vn-CC-m2' in UsersPhysicsConfig.xml)
double gFittedParam_vnCC_m2; 
///< fitted parameter (corresponds to `DIS-HMultWgt-vn-CC-m3' in UsersPhysicsConfig.xml)
double gFittedParam_vnCC_m3; 

//____________________________________________________________________________
int main(int argc, char ** argv)
{
  // Initialize
  Init(argc, argv);

  // Get data from the NuVld data-base
  GetXSecData();

  // Fit Rijk using MINUT
  DoTheFit();

  // Save plots etc 
  Save("rijk_fit.root");

  return 0;
}
//____________________________________________________________________________
void Init(int argc, char ** argv)
{
  // get command line arguments
  string url      = GetArgument(argc, argv, "-h");
  string username = GetArgument(argc, argv, "-u");
  string passwd   = GetArgument(argc, argv, "-p");
  string datasets = GetArgument(argc, argv, "-d");

  vector<string> dsvec = str::Split(datasets,",");
  vector<string>::const_iterator it = dsvec.begin();
  for( ; it != dsvec.end(); ++it) { 
    gEnabledDataSets.push_back( atoi(it->c_str()) );
  }

  // establish connection with the NuValidator data-base and create a
  // data-base interface
  TSQLServer * sql_server = TSQLServer::Connect(
       url.c_str(), username.c_str(), passwd.c_str());
  assert(sql_server && sql_server->IsConnected());
  gDBI = new DBI(sql_server);
  assert(gDBI);

  // Get the cross section models that we will be using
  AlgFactory * algf = AlgFactory::Instance();

  gRESXSecModel = 
     dynamic_cast<const XSecAlgorithmI *>(
             algf->GetAlgorithm("genie::ReinSehgalRESPXSec","Default"));
  gDISXSecModel = 
     dynamic_cast<const XSecAlgorithmI *>(
             algf->GetAlgorithm("genie::DISPartonModelPXSec","CC-Default"));

  LOG("RijkFit", pNOTICE) << "Got algorithm: " << gRESXSecModel->Id();
  LOG("RijkFit", pNOTICE) << "Got algorithm: " << gDISXSecModel->Id();

  //
  // *** Set all fitted GENIE Rijk parameters to 1. & reconfigure
  //

  gFittedParam_vpCC_m2 = 1.;  
  gFittedParam_vpCC_m3 = 1.; 
  gFittedParam_vnCC_m2 = 1.; 
  gFittedParam_vnCC_m3 = 1.; 

  AlgConfigPool * confp = AlgConfigPool::Instance();
  Registry * user_conf = confp->GlobalParameterList();
  user_conf->UnLock();

  user_conf->Set("DIS-HMultWgt-vp-CC-m2", gFittedParam_vpCC_m2);
  user_conf->Set("DIS-HMultWgt-vp-CC-m3", gFittedParam_vpCC_m3);
  user_conf->Set("DIS-HMultWgt-vn-CC-m2", gFittedParam_vnCC_m2);
  user_conf->Set("DIS-HMultWgt-vn-CC-m3", gFittedParam_vnCC_m3);

  algf->ForceReconfiguration();

  //
  gNuMuPdrv = new GEVGDriver;
  gNuMuNdrv = new GEVGDriver;
  gNuMuPdrv->Configure(kPdgNuMu,1,1);
  gNuMuNdrv->Configure(kPdgNuMu,0,1);

  //
  // calculate/store the neutrino resonance production cross section
  //
  {
    const int nn=2;
    int free_target[nn] = { kPdgTgtFreeP, kPdgTgtFreeN };
    int hit_nucleon[nn] = { kPdgProton,   kPdgNeutron  };

    for(int in=0; in < nn; in++) {
      Interaction * res = Interaction::RESCC(free_target[in], hit_nucleon[in],  kPdgNuMu); 
      double Ethr = res->PhaseSpace().Threshold();
      for(int ires = 0; ires < kNR; ires++) {
         Resonance_t resonance_id = kResonance[ires]; 
         res -> ExclTagPtr() -> SetResonance(resonance_id); 
         double E[kNE], xsec[kNE];
         // make sure the computed cubic sline will be well-behaved:
         // place first knot at E=0, second knot at E=Ethreshold &
         // used logarithmic spacing for E > Ethreshold
         E[0]=0.; xsec[0]=0.;
         for(int ie=1; ie<kNE; ie++) {
           E[ie] = Ethr + TMath::Power(10, (ie-1) * TMath::Log10(kEmax-Ethr)/(kNE-1));
           res -> InitStatePtr() -> SetProbeE(E[ie]);
           xsec[ie] = gRESXSecModel->Integral(res) / (1E-38*units::cm2);
         }//ie
         Spline * spl = new Spline(kNE, E, xsec);
         if(hit_nucleon[in]==kPdgProton) {
	   gSplMapRES_numup.insert(map<int,Spline*>::value_type(ires,spl));
         } else {
	   gSplMapRES_numun.insert(map<int,Spline*>::value_type(ires,spl));
         }
      }//ires
      delete res;
    }//in
  }

  //
  // use the data calculated above to calculate the RES cross section for the
  // process describing each fitted data set.
  //
  {
    //loop over fitted exclusive reactions
    for(int imode=1; imode<kNDataSets; imode++){
      double E[kNE], xsec[kNE];
      for(int ie=0; ie<kNE; ie++) {
         E[ie] = TMath::Power(10, ie * TMath::Log10(kEmax-kEmin)/(kNE-1));
         // calculate the resonance contribution to the process
         double xsec_res = 0;
         for(int ires = 0; ires < kNR; ires++) {
           double xs=0;
           if(imode==0 || imode==5 || imode==6) { xs = gSplMapRES_numup[ires]->Evaluate(E[ie]); }
           else                                 { xs = gSplMapRES_numun[ires]->Evaluate(E[ie]); }
           xsec_res += (xs * kRESFrac[imode][ires]);
         }//ires
         xsec[ie] = xsec_res;
      }//ie
      Spline * spl = new Spline(kNE, E, xsec);
      gSplMapRES.insert(map<int,Spline*>::value_type(imode,spl));
    }//imode
  }

  //
  // calculate/store the DIS contribution for the process describing each fitted data set
  // (all Rijk set to 1.0 at this point)
  //

  // W < Wcut
  {
    Interaction * discc_p = Interaction::DISCC(kPdgTgtFreeP, kPdgProton,  kPdgNuMu); 
    Interaction * discc_n = Interaction::DISCC(kPdgTgtFreeN, kPdgNeutron, kPdgNuMu); 
    //loop over fitted exclusive reactions
    for(int imode=1; imode<kNDataSets; imode++){
       Interaction* interaction = 0;
       if(imode==1 || imode==5 || imode==6) { interaction = discc_p; }
       else                                 { interaction = discc_n; }
       double Ethr = interaction->PhaseSpace().Threshold();
       double E[kNE], xsec[kNE];
       // make sure the computed cubic sline will be well-behaved:
       // place first knot at E=0, second knot at E=Ethreshold &
       // used logarithmic spacing for E > Ethreshold
       E[0]=0.; xsec[0]=0.;
       for(int ie=1; ie<kNE; ie++) {
         E[ie] = Ethr + TMath::Power(10, (ie-1) * TMath::Log10(kEmax-Ethr)/(kNE-1));
         interaction -> InitStatePtr() -> SetProbeE(E[ie]);
         // W-loop
         double dxsec_dW[kNWintg]; 
         Range1D_t Wrange = interaction->PhaseSpace().Limits(kKVW);
         double Wmin = Wrange.min;
         double Wmax = TMath::Min(Wrange.max, kWcut);
         double dW   = (Wmax-Wmin)/(kNWintg-1);
         for(int iw=0; iw<kNWintg; iw++) {
           double W = Wmin + iw * dW;
           interaction -> KinePtr() -> SetW(W);
           // integrate over Q2
           dxsec_dW[iw] = 0;
           Range1D_t Q2range = interaction->PhaseSpace().Limits(kKVQ2);
           double Q2min = Q2range.min;
           double Q2max = Q2range.max;
           double dQ2   = (Q2max-Q2min)/(kNQ2intg-1);
           for(int iq=0; iq<kNQ2intg; iq++) {
             double Q2 = Q2min + iq * dQ2;
             double x=0, y=0;
             kinematics::WQ2toXY(E[ie],kNucleonMass,W,Q2,x,y);
             interaction -> KinePtr() -> SetQ2(Q2);
             interaction -> KinePtr() -> Setx(x);
             interaction -> KinePtr() -> Sety(y);
             // call the cross section algorithm (returns xsec*jacobian)
             dxsec_dW[iw] += gDISXSecModel->XSec(interaction, kPSWQ2fE);
           }//iq
           dxsec_dW[iw] *= dQ2;
         }//iw
         // integrate over W; take W-dependent exclusive fractions into account
         xsec[ie]=0;
         for(int iw=0; iw<kNWintg; iw++) {
            double W = Wmin + iw * dW;
            //interpolate kDISFrac_b
            double frac=0.;
            int ipos = TMath::BinarySearch(kNW_b, kW_b, W);
            if(ipos==kNW_b-1) frac=kDISFrac_b[imode][ipos];
            else              frac=kDISFrac_b[imode][ipos] + (kW_b[ipos]-W) * 
                                (kDISFrac_b[imode][ipos]-kDISFrac_b[imode][ipos+1])/(kW_b[ipos]-kW_b[ipos+1]);
            //add contribution to xsec integral
            xsec[ie] += (dxsec_dW[iw] * frac * dW);
         }//iw
         xsec[ie] / (1E-38*units::cm2);
       }//ie
       Spline * spl = new Spline(kNE, E, xsec);
       gSplMapDIS_b.insert(map<int,Spline*>::value_type(imode,spl));
    }//imode
    delete discc_p;
    delete discc_n;
  }

  // repeat for W >= Wcut
  {
    Interaction * discc_p = Interaction::DISCC(kPdgTgtFreeP, kPdgProton,  kPdgNuMu); 
    Interaction * discc_n = Interaction::DISCC(kPdgTgtFreeN, kPdgNeutron, kPdgNuMu); 
    //loop over fitted exclusive reactions
    for(int imode=1; imode<kNDataSets; imode++){
       Interaction* interaction = 0;
       if(imode==1 || imode==5 || imode==6) { interaction = discc_p; }
       else                                 { interaction = discc_n; }
       double Ethr = interaction->PhaseSpace().Threshold();
       double E[kNE], xsec[kNE];
       // make sure the computed cubic sline will be well-behaved:
       // place first knot at E=0, second knot at E=Ethreshold &
       // used logarithmic spacing for E > Ethreshold
       E[0]=0.; xsec[0]=0.;
       for(int ie=1; ie<kNE; ie++) {
         E[ie] = Ethr + TMath::Power(10, (ie-1) * TMath::Log10(kEmax-Ethr)/(kNE-1));
         interaction -> InitStatePtr() -> SetProbeE(E[ie]);
         // W-loop
         double dxsec_dW[kNWintg]; 
         Range1D_t Wrange = interaction->PhaseSpace().Limits(kKVW);
         double Wmin = TMath::Max(Wrange.min, kWcut);
         double Wmax = TMath::Max(Wrange.max, Wmin);
         double dW   = (Wmax-Wmin)/(kNWintg-1);
         for(int iw=0; iw<kNWintg; iw++) {
           double W = Wmin + iw * dW;
           interaction -> KinePtr() -> SetW(W);
           // integrate over Q2
           dxsec_dW[iw] = 0;
           Range1D_t Q2range = interaction->PhaseSpace().Limits(kKVQ2);
           double Q2min = Q2range.min;
           double Q2max = Q2range.max;
           double dQ2   = (Q2max-Q2min)/(kNQ2intg-1);
           for(int iq=0; iq<kNQ2intg; iq++) {
             double Q2 = Q2min + iq * dQ2;
             double x=0, y=0;
             kinematics::WQ2toXY(E[ie],kNucleonMass,W,Q2,x,y);
             interaction -> KinePtr() -> SetQ2(Q2);
             interaction -> KinePtr() -> Setx(x);
             interaction -> KinePtr() -> Sety(y);
             // call the cross section algorithm (returns xsec*jacobian)
             dxsec_dW[iw] += gDISXSecModel->XSec(interaction, kPSWQ2fE);
           }//iq
           dxsec_dW[iw] *= dQ2;
         }//iw
         // integrate over W; take W-dependent exclusive fractions into account
         xsec[ie]=0;
         for(int iw=0; iw<kNWintg; iw++) {
            double W = Wmin + iw * dW;
            //interpolate kDISFrac_a
            double frac=0.;
            int ipos = TMath::BinarySearch(kNW_a, kW_a, W);
            if(ipos==kNW_a-1) frac=kDISFrac_a[imode][ipos];
            else              frac=kDISFrac_a[imode][ipos] + (kW_a[ipos]-W) * 
                                (kDISFrac_a[imode][ipos]-kDISFrac_a[imode][ipos+1])/(kW_a[ipos]-kW_a[ipos+1]);
            //add contribution to xsec integral
            xsec[ie] += (dxsec_dW[iw] * frac * dW);
         }//iw
         xsec[ie] / (1E-38*units::cm2);
       }//ie
       Spline * spl = new Spline(kNE, E, xsec);
       gSplMapDIS_a.insert(map<int,Spline*>::value_type(imode,spl));
    }//imode
    delete discc_p;
    delete discc_n;
  }

}
//____________________________________________________________________________
string GetArgument(int argc, char ** argv, const char * option)
{
// get the command line argument following the input 'option'

  for(int iarg = 0; iarg < argc-1; iarg++) {
    string argument(argv[iarg]);
    if (argument.compare(option) == 0 ) return string(argv[++iarg]);
  }
  return "";
}
//____________________________________________________________________________
void GetXSecData (void)
{
// download cross section data from the NuVld MySQL dbase

  for(int i=0; i<kNDataSets; i++) {
    gXSecData[i] = new DBTable<DBNuXSecTableRow>;

    DBQueryString query  = FormQuery(kKeyList[i]);
    DBStatus_t    status = gDBI->FillTable(gXSecData[i], query);

    assert(status == eDbu_OK);
  }

 // convert all filled-in DBTables to simple ROOT graphs (in fact multi-graphs: 
 // a collection of graphs, one per different expt/measurement id that makes up
 // the data-base table - can be used if different expt measurements are allowed 
 // to float in the fit).
 for(int i=0; i<kNDataSets; i++) {
    gXSecDataGrph[i] = gXSecData[i]->GetMultiGraph("all-noE");
 }
}
//____________________________________________________________________________
DBQueryString FormQuery(const char * key_list)
{
// forms a DBQueryString for extracting neutrino cross section data from the 
// input key-list and for the input energy range
  
  ostringstream query_string;
  
  query_string 
     << "KEY-LIST:" << key_list
     << "$CUTS:Emin=" << kEmin << ";Emax=" << kEmax
     << "$DRAW_OPT:none$DB-TYPE:vN-XSec";
  
  DBQueryString query(query_string.str());
  
  return query;
}
//____________________________________________________________________________
double GetXSecGENIE(double E, int imode)
{
// get the GENIE cross section, for the current Rijk parameters, for the input
// mode (matching the fitted data ids; see header) at the input energy

  //
  // 0 -> total xsec
  // (still inefficient; integration on the fly - not based on precomputed data)
  //
  if(imode == 0) {
    TLorentzVector p4(0,0,E,E);
    double xsec_tot = 0.5 * (gNuMuPdrv->XSecSum(p4) + gNuMuNdrv->XSecSum(p4));
    xsec_tot /= (1E-38 * units::cm2);

    LOG("RijkFit", pDEBUG) 
       << "xsec(total; E = " << E << " GeV) = " << xsec_tot << " 1E-38 * cm2";

    return xsec_tot;
  }

  //
  // Exclusive reactions
  //
  // single pion channels:
  // 1 -> v p -> l- p pi+ 
  // 2 -> v n -> l- p pi0 
  // 3 -> v n -> l- n pi+ 
  //
  // multi pion channels:
  // 4 -> v n -> l- p pi+ pi- 
  // 5 -> v p -> l- p pi+ pi0 
  // 6 -> v p -> l- n pi+ pi+ 
  //

  // calculate the resonance contribution
  double xsec_res = gSplMapRES[imode]->Evaluate(E);

  // calculate the dis contribution for W <  Wcut (Rijk=1)
  double xsec_dis_b = gSplMapDIS_b[imode]->Evaluate(E); 

  // calculate the dis contribution for W >= Wcut (Rijk=1)
  double xsec_dis_a = gSplMapDIS_a[imode]->Evaluate(E);

  // get the appropriate R factor for the input mode (data set)
  double R = 0;
  if      (imode==1)             { R = gFittedParam_vpCC_m2; }
  else if (imode==2 || imode==3) { R = gFittedParam_vnCC_m2; }
  if      (imode==4)             { R = gFittedParam_vnCC_m3; }
  else if (imode==5 || imode==6) { R = gFittedParam_vpCC_m3; }

  // sum-up
  double xsec = xsec_res + R * xsec_dis_b + xsec_dis_a;

  LOG("RijkFit", pDEBUG) 
   << "xsec(mode: "<< imode<< ", E = "<< E<< " GeV) = "<< xsec<< " 1E-38*cm2";
  LOG("RijkFit", pDEBUG) 
   << " R=" << R << ", xsec_res = " << xsec_res 
   << ", xsec_dis [b,a] = " << xsec_dis_b << ", " << xsec_dis_a;

  return xsec;
}
//____________________________________________________________________________
void DoTheFit(void)
{
  // Initialize MINUIT
  //
  const int np = 4;
  TMinuit * minuit = new TMinuit(np);

  double arglist[10];
  int ierrflg = 0;

  arglist[0] = 1;
  minuit->mnexcm("SET ERR",arglist,1,ierrflg);

  float        value [np] = { 0.10,          1.00,           0.30,           1.00           };
  float        min   [np] = { 0.00,          0.00,           0.00,           0.00           };
  float        max   [np] = { 2.00,          2.00,           2.00,           2.00           };
  float        step  [np] = { 0.05,          0.05,           0.05,           0.05           };
  const char * pname [np] = {"R(vp/CC/m2)",  "R(vp/CC/m3)",  "R(vn/CC/m2)",  "R(vn/CC/m3)"  };

  for(int i=0; i<np; i++) {
    LOG("RijkFit",pDEBUG)
        << "** Setting fit param " << i
          << "(" << pname[i] << ") value = " << value[i]
             << ", range = [" << min[i] << ", " << max[i] <<"]";

    minuit->mnparm(
       i, pname[i], value[i], step[i], min[i], max[i], ierrflg);
  }

  minuit->SetFCN(FitFunc);

  // MINUIT minimization step
  ierrflg    = 0;
  arglist[0] = 500;
  arglist[1] = 1.;
  minuit->mnexcm("MIGRAD",arglist,2,ierrflg);

  // Print results
  Double_t amin,edm,errdef;
  Int_t nvpar,nparx,icstat;
  minuit->mnstat(amin,edm,errdef,nvpar,nparx,icstat);
  minuit->mnprin(3,amin);
}
//____________________________________________________________________________
void FitFunc (
        Int_t &, Double_t *, Double_t &f, Double_t *par, Int_t /*iflag*/)
{
// the MINUIT fit function

  //
  // update fit parameters
  //

  AlgConfigPool * confp = AlgConfigPool::Instance();
  Registry * user_conf = confp->GlobalParameterList();
  user_conf->UnLock();

  LOG("RijkFit", pNOTICE) << "Setting: R(vp/CC/m2) = " << par[0];
  LOG("RijkFit", pNOTICE) << "Setting: R(vp/CC/m3) = " << par[1];
  LOG("RijkFit", pNOTICE) << "Setting: R(vn/CC/m2) = " << par[2];
  LOG("RijkFit", pNOTICE) << "Setting: R(vn/CC/m3) = " << par[3];

  gFittedParam_vpCC_m2 = par[0];
  gFittedParam_vpCC_m3 = par[1];
  gFittedParam_vnCC_m2 = par[2];
  gFittedParam_vnCC_m3 = par[3];

  // prapage params through GENIE (for s_tot which, currently, is calculated on the fly)
  user_conf->Set("DIS-HMultWgt-vp-CC-m2", gFittedParam_vpCC_m2);
  user_conf->Set("DIS-HMultWgt-vp-CC-m3", gFittedParam_vpCC_m3);
  user_conf->Set("DIS-HMultWgt-vn-CC-m2", gFittedParam_vnCC_m2);
  user_conf->Set("DIS-HMultWgt-vn-CC-m3", gFittedParam_vnCC_m3);
  AlgFactory * algf = AlgFactory::Instance();
  algf->ForceReconfiguration();

  //
  // calculate chisq for the current set of fitted parameters
  //
 
  double chisq = 0;

  // loop over all data sets included in the fit
  for(int imode=0; imode<kNDataSets; imode++) {

    // include current data set?
    vector<int>::const_iterator it =
        find(gEnabledDataSets.begin(), gEnabledDataSets.end(), imode);
    bool skip = (it==gEnabledDataSets.end());
    if(skip) continue;

    LOG("RijkFit",pNOTICE) << " *** Data Set : " << imode;	

    MultiGraph * mgr = gXSecDataGrph[imode];

    // loop over graphs in current data-set (one graph per experiment/publication in this data set)
    int ngr = mgr->NGraphs();
    for(int igr = 0; igr < ngr; igr++) {

       LOG("RijkFit",pNOTICE) 
           << " Subset : " << igr+1 << "/" << ngr 
           << " --> " << imode << " / " << mgr->GetLegendEntry(igr);

       // loop over data-points in current graph
       int np = mgr->GetGraph(igr)->GetN();
       for (int ip=0; ip < np; ip++) {

          double E             = mgr->GetGraph(igr)->GetX()[ip];
          double xsec_data     = mgr->GetGraph(igr)->GetY()[ip];    // data
          double xsec_data_err = mgr->GetGraph(igr)->GetErrorY(ip); // err(data)
          double xsec_model    = GetXSecGENIE(E,imode);

          double delta = (xsec_data>0) ? (xsec_data - xsec_model) / xsec_data_err : 0.;
          chisq += delta*delta;

          LOG("RijkFit", pNOTICE)
             << " > pnt " << ip+1 << "/" << np << " @ E = " << E << " GeV : Data = " << xsec_data
             << " +/- " << xsec_data_err << " x1E-38 cm^2, Model = " 
             << xsec_model << " x1E-38 cm^2 "
             << " >> Running chisq = " << chisq;

       } // graph points
    } // graph
  } // data set

  f = chisq;

  LOG("RijkFit", pINFO) << "**** chisq = " << chisq;
}
//____________________________________________________________________________
void Save(string filename)
{
// post-fit write-out

  TFile fout(filename.c_str(), "recreate");
  fout.cd();

  // save fitted data-sets
  for(int imode=0; imode<kNDataSets; imode++) {
    MultiGraph * mgr = gXSecDataGrph[imode];
    for(unsigned int igr=0; igr<mgr->NGraphs(); igr++) {
      ostringstream name;
      name << "data_set_" << imode << "_" << igr;
      mgr->GetGraph(igr)->SetName(name.str().c_str());
      mgr->GetGraph(igr)->SetTitle(mgr->GetLegendEntry(igr).c_str());
      mgr->GetGraph(igr)->Write();
    }
  }

  // save best fit predictions
  for(int i=0; i<kNDataSets; i++) {

  }

  // write-out fitted params / errors  

  fout.Close();
}
//____________________________________________________________________________
