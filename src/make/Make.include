#
# Make.include for GENIE Object-Oriented Neutrino Generator
#
# Costas Andreopoulos (Rutherford Lab.) <costas.andreopoulos \at stfc.ac.uk>
#

#-------------------------------------------------------------------
#                 Read in configure script output
#-------------------------------------------------------------------
# Include file generated by the configure script
# Type './configure --help' for more information

include $(GENIE)/src/make/Make.config

ifndef GOPT_WITH_CXX_USERDEF_FLAGS
 GOPT_WITH_CXX_USERDEF_FLAGS=
endif

#-------------------------------------------------------------------
#                           ARCHITECTURE 
#-------------------------------------------------------------------
# As defined by ROOT
ARCH      = $(shell root-config --arch)  
ARCH_OK   = 
IS_MACOSX =

#-------------------------------------------------------------------
#                              GENIE
#-------------------------------------------------------------------

# GENIE release info
#
GVERSION  = $(shell awk '{print $0}' $(GENIE)/VERSION)

# GENIE paths
#
GENIE_LIB_PATH    := $(GENIE)/lib
GENIE_BIN_PATH    := $(GENIE)/bin
GENIE_SRC_PATH    := $(GENIE)/src
GENIE_CONFIG_PATH := $(GENIE)/config

# GENIE installation paths used with 'make install'
# The $GENIE_INSTALLATION_PATH is determined from ./configure --prefix=...
#
GENIE_LIB_INSTALLATION_PATH     := $(GENIE_INSTALLATION_PATH)/lib
GENIE_BIN_INSTALLATION_PATH     := $(GENIE_INSTALLATION_PATH)/bin
GENIE_INCBASE_INSTALLATION_PATH := $(GENIE_INSTALLATION_PATH)/include
GENIE_INC_INSTALLATION_PATH     := $(GENIE_INCBASE_INSTALLATION_PATH)/GENIE

# GENIE header files base dir
#
GENIE_INCLUDES := -I$(GENIE)/src/

# The following will be appended in the library name 
#
GLIBVERSION =
ifeq ($(strip $(GOPT_ENABLE_DYLIBVERSION)),YES) 
  GLIBVERSION = -$(GVERSION)
endif

# Look for traces of a previous installation at the specified
# installation location
#
ifeq ($(shell ls $(GENIE_INC_INSTALLATION_PATH) 2>/dev/null ),)
  GENIE_PREVIOUS_INSTALLATION = NO
else
  GENIE_PREVIOUS_INSTALLATION = YES
endif

#-------------------------------------------------------------------
#                             libxml2
#-------------------------------------------------------------------

# XML lib & include directories 

ifdef GOPT_WITH_LIBXML2_INC
XML_INC_DIR = $(GOPT_WITH_LIBXML2_INC)
else
XML_INC_DIR = /usr/include/libxml2
endif

ifdef GOPT_WITH_LIBXML2_LIB
XML_LIB_DIR = $(GOPT_WITH_LIBXML2_LIB)
else
XML_LIB_DIR = /usr/lib
endif

# XML libraries and headers

XML_INCLUDES  := -I$(XML_INC_DIR) 
XML_LIBRARIES := -L$(XML_LIB_DIR) -lxml2

#-------------------------------------------------------------------
#                             log4cpp
#-------------------------------------------------------------------

# log4cpp lib & include directory

ifdef GOPT_WITH_LOG4CPP_INC
LOG_INC_DIR = $(GOPT_WITH_LOG4CPP_INC)
else
LOG_INC_DIR = /usr/local/src/log4cpp/include
endif

ifdef GOPT_WITH_LOG4CPP_LIB
LOG_LIB_DIR = $(GOPT_WITH_LOG4CPP_LIB)
else
LOG_LIB_DIR = /usr/local/lib
endif

# log4cpp libraries and headers

LOG_INCLUDES  := -I$(LOG_INC_DIR)
LOG_LIBRARIES := -L$(LOG_LIB_DIR) -llog4cpp

#-------------------------------------------------------------------
#                     libfortran and/or libg2c
#-------------------------------------------------------------------

FORT_LIBRARIES =

ifeq ($(strip $(ARCH)),linux) 
have_g2c := $(wildcard /usr/lib/libg2c.so)
ifneq ($(strip $(have_g2c)),)
FORT_LIBRARIES = -L/usr/lib -lg2c
endif
have_gfortran := $(wildcard /usr/lib/libgfortran.so)
ifneq ($(strip $(have_gfortran)),)
FORT_LIBRARIES := $(FORT_LIBRARIES) -lgfortran
endif 
endif # linux

ifeq ($(strip $(ARCH)),linuxx8664gcc) 
have_g2c := $(wildcard /usr/lib64/libg2c.so)
ifneq ($(strip $(have_g2c)),)
FORT_LIBRARIES = -L/usr/lib64 -lg2c
endif
have_gfortran := $(wildcard /usr/lib64/libgfortran.so)
ifneq ($(strip $(have_gfortran)),)
FORT_LIBRARIES := $(FORT_LIBRARIES) -lgfortran
endif 
endif # linuxx8664gcc

ifeq ($(strip $(ARCH)),macosx) 
have_g2c := $(wildcard /usr/local/lib/libg2c.dylib)
ifneq ($(strip $(have_g2c)),)
FORT_LIBRARIES = /usr/local/lib/libg2c.dylib
endif
have_gfortran := $(wildcard /usr/local/lib/libgfortran.dylib)
ifneq ($(strip $(have_gfortran)),)
FORT_LIBRARIES := $(FORT_LIBRARIES) /usr/local/lib/libgfortran.dylib
endif 
endif # macosx

ifeq ($(strip $(ARCH)),macosx64) 
have_g2c := $(wildcard /usr/local/lib/libg2c.dylib)
ifneq ($(strip $(have_g2c)),)
FORT_LIBRARIES = /usr/local/lib/libg2c.dylib
endif
have_gfortran := $(wildcard /usr/local/lib/libgfortran.dylib)
ifneq ($(strip $(have_gfortran)),)
FORT_LIBRARIES := $(FORT_LIBRARIES) /usr/local/lib/libgfortran.dylib
endif 
endif # macosx64

#-------------------------------------------------------------------
#                             CERNLIB
#-------------------------------------------------------------------

ifeq ($(strip $(GOPT_ENABLE_CERNLIB)),YES) 

CERN_LIB_DIR = $(GOPT_WITH_CERN_LIB)

# figure out which pdflib to use (name keeps changing)

#-- find all libraries named libpdflib*.a and remove the .a part
PPDFLIBS = $(subst .a,,$(wildcard $(CERN_LIB_DIR)/libpdflib*.a))
#-- if many were found use the first one
PPDFLIB  = $(shell awk 'BEGIN {str="$(PPDFLIBS)"; \
			split(str, tokens, " "); print tokens[1]}')
#-- remove the path name
PDFLIB   = $(shell awk 'BEGIN {str="$(PPDFLIB)"; \
			n=split(str, tokens, "/"); print tokens[n]}')
#-- replace the first lib with -l so libpdflib -> -lpdflib
LPDFLIB  = $(shell awk 'BEGIN { str="$(PDFLIB)"; \
				sub(/lib/, "-l", str); print str}')

CERN_LIBRARIES = -L$(CERN_LIB_DIR) $(LPDFLIB) -lkernlib -lmathlib -lpacklib $(FORT_LIBRARIES)

endif # enable-cern

#-------------------------------------------------------------------
#                             LHAPDF
#-------------------------------------------------------------------

LHAPDF_LIBRARIES = 
LHAPDF_INCLUDES  =

ifeq ($(strip $(GOPT_ENABLE_LHAPDF)),YES) 

LHAPDF_INCLUDES  = -I$(GOPT_WITH_LHAPDF_INC)
LHAPDF_LIBRARIES = -L$(GOPT_WITH_LHAPDF_LIB) -lLHAPDF $(FORT_LIBRARIES)

endif

#-------------------------------------------------------------------
#                             PYTHIA6
#-------------------------------------------------------------------

# PYTHIA6 dir/lib/object file

PYTHIA_DIR = $(GOPT_WITH_PYTHIA6_LIB)
PYTHIA_O   = $(wildcard $(PYTHIA_DIR)/pythia*.o) # match all vrs

PYTHIA_LIBRARIES  = -L$(PYTHIA_DIR) -lPythia6 $(PYTHIA_O)

ifeq ($(strip $(ARCH)),macosx) 
PYTHIA_LIBRARIES  = -L$(PYTHIA_DIR) -lPythia6 
endif

#-------------------------------------------------------------------
#                              ROOT
#-------------------------------------------------------------------
# ROOT headers and libraries
ROOT_INCLUDES  = -I$(shell root-config --incdir)
ROOT_LIBRARIES = $(shell root-config --glibs) \
                        -lMinuit -lGeom -lEG -lEGPythia6 -lGenVector

#-------------------------------------------------------------------
#                   PROFILING / DEBUGING OPTIONS
#-------------------------------------------------------------------
# Linking in the Google Profiling Tool library
#
GPROF_LIBRARIES = 
ifeq ($(strip $(GOPT_ENABLE_PROFILER)),YES)
  ifdef GOPT_WITH_PROFILER_LIB
    GPROF_LIBRARIES += -L$(GOPT_WITH_PROFILER_LIB) -lprofiler
  else
    GPROF_LIBRARIES += -L/usr/local/lib -lprofiler
  endif
endif

#-------------------------------------------------------------------
#                               DOXYGEN
#-------------------------------------------------------------------
# if doc was enabled but DOXYGEN was not set, try a default
#
ifdef GOPT_ENABLE_DOXYGEN_DOC
  ifdef GOPT_WITH_DOXYGEN_PATH
    DOXYGEN=$(GOPT_WITH_DOXYGEN_PATH)/doxygen
  else
    DOXYGEN=doxygen
  endif
endif

#-------------------------------------------------------------------
#                       Some global variables
#-------------------------------------------------------------------
MAKE   := make
RM      = rm -f
MKDIR   = mkdir -p
CAT     = cat
SYMLINK = ln -sf
COPY    = cp
INSTALL = @INSTALL@

# AR, ARFLAGS and RANLIB are for manipulating an archive
AR        = ar
ARFLAGS   = rv
RANLIB    = ranlib

#-------------------------------------------------------------------
#                        COMPILER OPTIONS
#-------------------------------------------------------------------

# -- gcc

CXX = g++
LD  = g++

# get gcc version & split in '.' delimited tokens (major/minor/revison num.)
CXXVRS      = $(shell $(CXX) -dumpversion)
CXXVRS_MAJ  = $(shell awk 'BEGIN {\
		str="$(CXXVRS)"; split(str, tk, "."); print tk[1]}')
CXXVRS_MIN  = $(shell awk 'BEGIN {\
		str="$(CXXVRS)"; split(str, tk, "."); print tk[2]}')
CXXVRS_REV  = $(shell awk 'BEGIN {\
		str="$(CXXVRS)"; split(str, tk, "."); print tk[3]}')

# gcc version >= 4.1.0 ?
GCC_GE_4_1_0  = $(shell awk 'BEGIN {\
		if($(CXXVRS_MAJ)>=4 && $(CXXVRS_MIN)>0) print "YES"}') 

# MAC OS X with gcc, 32-bit mode
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),macosx) 
ARCH_OK       = YES
IS_MACOSX     = YES
CXXFLAGS      = -pipe -W -Wall -Wno-long-double \
		-fsigned-char -fno-common -flat_namespace \
		$(GOPT_WITH_CXX_DEBUG_FLAG) \
		$(GOPT_WITH_CXX_OPTIMIZ_FLAG) \
		$(GOPT_WITH_CXX_USERDEF_FLAGS) 
ifeq ($(strip $(GCC_GE_4_1_0)), YES) 
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
endif
LDFLAGS       = -bind_at_load
SOFLAGS       = -dynamiclib -flat_namespace \
		-single_module -undefined dynamic_lookup
DllSuf       := dylib
DllLinkSuf   := so
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF        =
EXTRALIBS     = 
endif

# MAC OS X with gcc, 64-bit mode
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),macosx64) 
ARCH_OK       = YES
IS_MACOSX     = YES
CXXFLAGS      = -m64 -pipe -W -Wall \
		-fsigned-char -fno-common -flat_namespace \
		$(GOPT_WITH_CXX_DEBUG_FLAG) \
		$(GOPT_WITH_CXX_OPTIMIZ_FLAG) \
		$(GOPT_WITH_CXX_USERDEF_FLAGS) 
ifeq ($(strip $(GCC_GE_4_1_0)), YES) 
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
endif
LDFLAGS       = -bind_at_load
SOFLAGS       = -dynamiclib -flat_namespace \
		-single_module -undefined dynamic_lookup
DllSuf       := dylib
DllLinkSuf   := so
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF        =
EXTRALIBS     = 
endif

# LINUX / 32-bit x86 / with gcc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),linux) 
ARCH_OK       = YES
CXXFLAGS      = -Wall -fPIC \
		$(GOPT_WITH_CXX_DEBUG_FLAG) \
		$(GOPT_WITH_CXX_OPTIMIZ_FLAG) \
		$(GOPT_WITH_CXX_USERDEF_FLAGS) 
ifeq ($(strip $(GCC_GE_4_1_0)), YES) 
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
endif
LDFLAGS       = -g -Wl,--no-as-needed -Wl,--no-undefined
SOFLAGS       = -shared
DllSuf       := so
DllLinkSuf   := 
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF        =
EXTRALIBS     = -lnsl
endif

# LINUX / 64-bit x86 / with gcc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),linuxx8664gcc) 
ARCH_OK       = YES
CXXFLAGS      = -Wall -fPIC \
		$(GOPT_WITH_CXX_DEBUG_FLAG) \
		$(GOPT_WITH_CXX_OPTIMIZ_FLAG) \
		$(GOPT_WITH_CXX_USERDEF_FLAGS) 
ifeq ($(strip $(GCC_GE_4_1_0)), YES) 
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
endif
LDFLAGS       = -g -Wl,--no-as-needed -Wl,--no-undefined
SOFLAGS       = -shared
DllSuf       := so
DllLinkSuf   := 
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF        =
EXTRALIBS     = -lnsl
endif

#-------------------------------------------------------------------
#                            SUMMING-UP
#-------------------------------------------------------------------

# includes and libraries needed to compile programs. 

INCLUDES := $(ROOT_INCLUDES) \
	    $(XML_INCLUDES) \
	    $(LOG_INCLUDES) \
	    $(LHAPDF_INCLUDES) \
	    $(GENIE_INCLUDES) \
	    $(LINUX_SYS_INCLUDES)

LIBRARIES := $(SYSLIBS) \
             $(ROOT_LIBRARIES) \
             $(PYTHIA_LIBRARIES) \
             $(LHAPDF_LIBRARIES) \
             $(XML_LIBRARIES) \
             $(LOG_LIBRARIES) \
             $(GPROF_LIBRARIES) \
	     $(EXTRALIBS)

# Default compiler and preprocessor flags

CXXFLAGS := $(ENV_CXXFLAGS) $(CXXFLAGS)
CPPFLAGS  = $(INCLUDES)
CFLAGS    = -g

#-------------------------------------------------------------------
#                            MAKE RULES
#-------------------------------------------------------------------

.SUFFIXES : .inc .cxx

#.cc.o:
#	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

#.cxx.o:
#	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) $<

.C.o:
	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.c.o:
	$(CC) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.F.o :
	$(FORT) $(FORTOPTS) -o $@ $<

.f.o :
	$(FORT) $(FORTOPTS) -o $@ $<

.F.a :
	$(FORT) $(FORTOPTS) -o $*.o $<
	$(AR) $(ARFLAGS) $@ $*.o
	$(RANLIB) $@
	$(RM) $*.o

.f.a :
	$(FORT) $(FORTOPTS) -o $*.o $<
	$(AR) $(ARFLAGS) $@ $*.o
	$(RANLIB) $@
	$(RM) $*.o
